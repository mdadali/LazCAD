unit uPSI_Postprocessor;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_Postprocessor = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_Postprocessor(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_Postprocessor_Routines(S: TPSExec);

procedure Register;

implementation


uses
   ComCtrls
  ,DB
  ,applicationh
  ,CADTypes
  ,CADConstants
  ,fdmMain
  ,cPostprocessor
  ,Postprocessor
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_Postprocessor]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_Postprocessor(CL: TPSPascalCompiler);
begin
 CL.AddDelphiFunction('Function ppID : integer');
 CL.AddDelphiFunction('Function ppDescription : string');
 CL.AddDelphiFunction('Function ppMachineName : string');
 CL.AddDelphiFunction('Function ppAutor : string');
 CL.AddDelphiFunction('Function ppDecimalSep : char');
 CL.AddDelphiFunction('Function ppUnitFactor : TFloatType');
 CL.AddDelphiFunction('Function ppMinEntityDistance : TFloatType');
 CL.AddDelphiFunction('Function ppFloatFormat : string');
 CL.AddDelphiFunction('Function ppIsPgmIncremental : boolean');
 CL.AddDelphiFunction('Function ppArcCenterAbsolute : boolean');
 CL.AddDelphiFunction('Function ppFileFilter : string');
 CL.AddDelphiFunction('Function ppInitialDir : string');
 CL.AddDelphiFunction('Function ppOutputKerfCmd : boolean');
 CL.AddDelphiFunction('Function ppOutputKerfValue : boolean');
 CL.AddDelphiFunction('Function ppKerfValue : TFloatType');
 CL.AddDelphiFunction('Function ppPrintLineNumber : boolean');
 CL.AddDelphiFunction('Function ppLineNumPrefix : string');
 CL.AddDelphiFunction('Function ppLineNumStart : integer');
 CL.AddDelphiFunction('Function ppLineNumStep : integer');
 CL.AddDelphiFunction('Function ppSaveWithoutDialog : boolean');
 CL.AddDelphiFunction('Function ppAutoSaveFileNameFormat : string');
 CL.AddDelphiFunction('Function ppAutoSaveFileNameTriger : integer');
 CL.AddDelphiFunction('Function ppScript : string');
 CL.AddDelphiFunction('Function ppGenerateOutput : boolean');
 CL.AddDelphiFunction('Function ppUseCadFileNameForOutput : boolean');
 CL.AddDelphiFunction('Function ppProcessID : integer');
 CL.AddDelphiFunction('Function ppToolID : integer');
 CL.AddDelphiFunction('Function ppToolTableName : string');
 CL.AddDelphiFunction('Function ppOutputUnicode : boolean');
 CL.AddDelphiFunction('Function ppProcessName : string');
 CL.AddDelphiFunction('Function ppToolName : string');
 CL.AddDelphiFunction('Function ppProgramName : string');
 CL.AddDelphiFunction('Function ppOutputFileName : string');
 CL.AddDelphiFunction('Function ppGetCurrPpID : integer');
 CL.AddDelphiFunction('Function ppGetCurrPpName : string');
 CL.AddDelphiFunction('Function ppGetName( APpID : Integer) : string');
 CL.AddDelphiFunction('Function ppGetPpID( APpName : string) : integer');
 CL.AddDelphiFunction('Function ppGetIntegerFieldValue( APpID : Integer; AFieldName : string) : integer');
 CL.AddDelphiFunction('Function ppGetStringFieldValue( APpID : Integer; AFieldName : string) : string');
 CL.AddDelphiFunction('Function ppGetFloatFieldValue( APpID : Integer; AFieldName : string) : double');
 CL.AddDelphiFunction('Function ppGetBoolFieldValue( APpID : Integer; AFieldName : string) : boolean');
 CL.AddDelphiFunction('Function ppGetDateTimeFieldValue( APpID : Integer; AFieldName : string) : TDateTime');
 CL.AddDelphiFunction('Function ppGetIntegerOption( AParamName : string) : integer');
 CL.AddDelphiFunction('Function ppGetStringOption( AParamName : string) : string');
 CL.AddDelphiFunction('Function ppGetFloatOption( AParamName : string) : double');
 CL.AddDelphiFunction('Function ppGetBoolOption( AParamName : string) : boolean');
 CL.AddDelphiFunction('Function ppGetIntegerToolTableValue( AParamName : string) : integer');
 CL.AddDelphiFunction('Function ppGetStringToolTableValue( AParamName : string) : string');
 CL.AddDelphiFunction('Function ppGetFloatToolTableValue( AParamName : string) : double');
 CL.AddDelphiFunction('Function ppGetBoolToolTableValue( AParamName : string) : boolean');
 CL.AddDelphiFunction('Procedure ppReset( ACADDocument : integer; AMachineName : string; AProgressBar : TProgressBar)');
 CL.AddDelphiFunction('Procedure ppExecute');
 CL.AddDelphiFunction('Procedure ppLocate( APPName : string)');
 CL.AddDelphiFunction('Procedure ppShowSettings');
 CL.AddDelphiFunction('Procedure PPGetPostprocessorList( AStrings : TStrings)');
 CL.AddDelphiFunction('Function ppGetFileExt( AIndex : integer) : string');
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_Postprocessor_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@ppID, 'ppID', cdRegister);
 S.RegisterDelphiFunction(@ppDescription, 'ppDescription', cdRegister);
 S.RegisterDelphiFunction(@ppMachineName, 'ppMachineName', cdRegister);
 S.RegisterDelphiFunction(@ppAutor, 'ppAutor', cdRegister);
 S.RegisterDelphiFunction(@ppDecimalSep, 'ppDecimalSep', cdRegister);
 S.RegisterDelphiFunction(@ppUnitFactor, 'ppUnitFactor', cdRegister);
 S.RegisterDelphiFunction(@ppMinEntityDistance, 'ppMinEntityDistance', cdRegister);
 S.RegisterDelphiFunction(@ppFloatFormat, 'ppFloatFormat', cdRegister);
 S.RegisterDelphiFunction(@ppIsPgmIncremental, 'ppIsPgmIncremental', cdRegister);
 S.RegisterDelphiFunction(@ppArcCenterAbsolute, 'ppArcCenterAbsolute', cdRegister);
 S.RegisterDelphiFunction(@ppFileFilter, 'ppFileFilter', cdRegister);
 S.RegisterDelphiFunction(@ppInitialDir, 'ppInitialDir', cdRegister);
 S.RegisterDelphiFunction(@ppOutputKerfCmd, 'ppOutputKerfCmd', cdRegister);
 S.RegisterDelphiFunction(@ppOutputKerfValue, 'ppOutputKerfValue', cdRegister);
 S.RegisterDelphiFunction(@ppKerfValue, 'ppKerfValue', cdRegister);
 S.RegisterDelphiFunction(@ppPrintLineNumber, 'ppPrintLineNumber', cdRegister);
 S.RegisterDelphiFunction(@ppLineNumPrefix, 'ppLineNumPrefix', cdRegister);
 S.RegisterDelphiFunction(@ppLineNumStart, 'ppLineNumStart', cdRegister);
 S.RegisterDelphiFunction(@ppLineNumStep, 'ppLineNumStep', cdRegister);
 S.RegisterDelphiFunction(@ppSaveWithoutDialog, 'ppSaveWithoutDialog', cdRegister);
 S.RegisterDelphiFunction(@ppAutoSaveFileNameFormat, 'ppAutoSaveFileNameFormat', cdRegister);
 S.RegisterDelphiFunction(@ppAutoSaveFileNameTriger, 'ppAutoSaveFileNameTriger', cdRegister);
 S.RegisterDelphiFunction(@ppScript, 'ppScript', cdRegister);
 S.RegisterDelphiFunction(@ppGenerateOutput, 'ppGenerateOutput', cdRegister);
 S.RegisterDelphiFunction(@ppUseCadFileNameForOutput, 'ppUseCadFileNameForOutput', cdRegister);
 S.RegisterDelphiFunction(@ppProcessID, 'ppProcessID', cdRegister);
 S.RegisterDelphiFunction(@ppToolID, 'ppToolID', cdRegister);
 S.RegisterDelphiFunction(@ppToolTableName, 'ppToolTableName', cdRegister);
 S.RegisterDelphiFunction(@ppOutputUnicode, 'ppOutputUnicode', cdRegister);
 S.RegisterDelphiFunction(@ppProcessName, 'ppProcessName', cdRegister);
 S.RegisterDelphiFunction(@ppToolName, 'ppToolName', cdRegister);
 S.RegisterDelphiFunction(@ppProgramName, 'ppProgramName', cdRegister);
 S.RegisterDelphiFunction(@ppOutputFileName, 'ppOutputFileName', cdRegister);
 S.RegisterDelphiFunction(@ppGetCurrPpID, 'ppGetCurrPpID', cdRegister);
 S.RegisterDelphiFunction(@ppGetCurrPpName, 'ppGetCurrPpName', cdRegister);
 S.RegisterDelphiFunction(@ppGetName, 'ppGetName', cdRegister);
 S.RegisterDelphiFunction(@ppGetPpID, 'ppGetPpID', cdRegister);
 S.RegisterDelphiFunction(@ppGetIntegerFieldValue, 'ppGetIntegerFieldValue', cdRegister);
 S.RegisterDelphiFunction(@ppGetStringFieldValue, 'ppGetStringFieldValue', cdRegister);
 S.RegisterDelphiFunction(@ppGetFloatFieldValue, 'ppGetFloatFieldValue', cdRegister);
 S.RegisterDelphiFunction(@ppGetBoolFieldValue, 'ppGetBoolFieldValue', cdRegister);
 S.RegisterDelphiFunction(@ppGetDateTimeFieldValue, 'ppGetDateTimeFieldValue', cdRegister);
 S.RegisterDelphiFunction(@ppGetIntegerOption, 'ppGetIntegerOption', cdRegister);
 S.RegisterDelphiFunction(@ppGetStringOption, 'ppGetStringOption', cdRegister);
 S.RegisterDelphiFunction(@ppGetFloatOption, 'ppGetFloatOption', cdRegister);
 S.RegisterDelphiFunction(@ppGetBoolOption, 'ppGetBoolOption', cdRegister);
 S.RegisterDelphiFunction(@ppGetIntegerToolTableValue, 'ppGetIntegerToolTableValue', cdRegister);
 S.RegisterDelphiFunction(@ppGetStringToolTableValue, 'ppGetStringToolTableValue', cdRegister);
 S.RegisterDelphiFunction(@ppGetFloatToolTableValue, 'ppGetFloatToolTableValue', cdRegister);
 S.RegisterDelphiFunction(@ppGetBoolToolTableValue, 'ppGetBoolToolTableValue', cdRegister);
 S.RegisterDelphiFunction(@ppReset, 'ppReset', cdRegister);
 S.RegisterDelphiFunction(@ppExecute, 'ppExecute', cdRegister);
 S.RegisterDelphiFunction(@ppLocate, 'ppLocate', cdRegister);
 S.RegisterDelphiFunction(@ppShowSettings, 'ppShowSettings', cdRegister);
 S.RegisterDelphiFunction(@PPGetPostprocessorList, 'PPGetPostprocessorList', cdRegister);
 S.RegisterDelphiFunction(@ppGetFileExt, 'ppGetFileExt', cdRegister);
end;

 
 
{ TPSImport_Postprocessor }
(*----------------------------------------------------------------------------*)
procedure TPSImport_Postprocessor.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_Postprocessor(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_Postprocessor.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_Postprocessor_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
